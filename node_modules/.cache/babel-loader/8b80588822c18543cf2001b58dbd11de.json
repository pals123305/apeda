{"ast":null,"code":"\"use strict\";\n\nvar _interopRequire = function _interopRequire(obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n    Object.defineProperties(target, props);\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) subClass.__proto__ = superClass;\n};\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar React = _interopRequire(require(\"react\"));\nvar classSet = _interopRequire(require(\"classnames\"));\nvar DropdownMenuItem = function (_React$Component) {\n  function DropdownMenuItem() {\n    _classCallCheck(this, DropdownMenuItem);\n    if (_React$Component != null) {\n      _React$Component.apply(this, arguments);\n    }\n  }\n  _inherits(DropdownMenuItem, _React$Component);\n  _createClass(DropdownMenuItem, {\n    handleSelect: {\n      value: function handleSelect(e) {\n        e.preventDefault();\n        if (!this.props.disabled) {\n          var selectedItem = {\n            text: e.target.text,\n            value: e.target.getAttribute(\"value\")\n          };\n          this.props.onSelect(selectedItem);\n        }\n      }\n    },\n    render: {\n      value: function render() {\n        var classes = classSet({\n          divider: this.props.isDivider,\n          disabled: this.props.disabled\n        });\n        var content = this.renderItemContent();\n        return React.createElement(\"li\", {\n          role: \"presentation\",\n          className: classes\n        }, content);\n      }\n    },\n    renderItemContent: {\n      value: function renderItemContent() {\n        if (this.props.isDivider) {\n          return null;\n        } else {\n          return React.createElement(\"a\", {\n            role: \"menuitem\",\n            tabIndex: \"-1\",\n            href: \"#\",\n            value: this.props.value,\n            onClick: this.handleSelect.bind(this)\n          }, this.props.children);\n        }\n      }\n    }\n  });\n  return DropdownMenuItem;\n}(React.Component);\nDropdownMenuItem.propTypes = {\n  isDivider: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n  value: React.PropTypes.string\n};\nDropdownMenuItem.defaultProps = {\n  isDivider: false,\n  disabled: false\n};\nmodule.exports = DropdownMenuItem;","map":null,"metadata":{},"sourceType":"script"}