{"ast":null,"code":"\"use strict\";\n\nvar _interopRequire = function _interopRequire(obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n    Object.defineProperties(target, props);\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) subClass.__proto__ = superClass;\n};\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar React = _interopRequire(require(\"react\"));\nvar classSet = _interopRequire(require(\"classnames\"));\nvar DropDownButton = function (_React$Component) {\n  function DropDownButton() {\n    _classCallCheck(this, DropDownButton);\n    _get(Object.getPrototypeOf(DropDownButton.prototype), \"constructor\", this).call(this);\n    this.state = {\n      opened: false\n    };\n  }\n  _inherits(DropDownButton, _React$Component);\n  _createClass(DropDownButton, {\n    toggleOpen: {\n      value: function toggleOpen() {\n        // cant use ref in parent, need to use new version of react?\n        this.props.toggleOpen();\n        var state = this.state;\n        state.opened = !state.opened;\n        this.setState(state);\n      }\n    },\n    render: {\n      value: function render() {\n        var classes = classSet(\"btn\", \"btn-default\", \"dropdown-toggle\", {\n          disabled: this.props.disabled\n        });\n        return React.createElement(\"button\", {\n          className: classes,\n          type: \"button\",\n          id: this.props.id,\n          onClick: this.toggleOpen.bind(this),\n          \"aria-expanded\": this.state.opened\n        }, this.props.children, React.createElement(\"span\", {\n          className: this.props.caretClass\n        }));\n      }\n    }\n  });\n  return DropDownButton;\n}(React.Component);\n;\nDropDownButton.propTypes = {\n  caretClass: React.PropTypes.string.isRequired\n};\nmodule.exports = DropDownButton;","map":null,"metadata":{},"sourceType":"script"}