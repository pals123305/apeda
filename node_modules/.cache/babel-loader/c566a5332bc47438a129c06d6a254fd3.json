{"ast":null,"code":"\"use strict\";\n\nvar _interopRequire = function _interopRequire(obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n    Object.defineProperties(target, props);\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) subClass.__proto__ = superClass;\n};\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar React = _interopRequire(require(\"react\"));\nvar DropdownButton = _interopRequire(require(\"./DropdownButton\"));\nvar DropdownMenu = _interopRequire(require(\"./DropdownMenu\"));\nvar classSet = _interopRequire(require(\"classnames\"));\nvar DropDown = function (_React$Component) {\n  function DropDown(props) {\n    _classCallCheck(this, DropDown);\n    _get(Object.getPrototypeOf(DropDown.prototype), \"constructor\", this).call(this, props);\n    this.state = {\n      title: null,\n      open: false\n    };\n  }\n  _inherits(DropDown, _React$Component);\n  _createClass(DropDown, {\n    componentDidMount: {\n      value: function componentDidMount() {\n        this.setState({\n          title: this.props.title,\n          open: false\n        });\n        document.addEventListener(\"click\", this.handleDocumentClick.bind(this));\n      }\n    },\n    componentWillUnmount: {\n      value: function componentWillUnmount() {\n        document.removeEventListener(\"click\", this.handleDocumentClick.bind(this));\n      }\n    },\n    handleTitleAndSelect: {\n      value: function handleTitleAndSelect(item) {\n        // update the title state and autoclose (use single state change)\n        if (this.props.updateTitle) {\n          var state = this.state;\n          state.title = item.text;\n          state.open = false;\n          this.setState(state);\n        } else {\n          // close the dropdown\n          this.toogleOpen();\n        }\n        this.props.onSelect(item);\n      }\n    },\n    toogleOpen: {\n      /**\n       * Toggles the visibility of the dropdown\n       * @return {[type]} [description]\n       */\n\n      value: function toogleOpen() {\n        var state = this.state;\n        state.open = !state.open;\n        this.setState(state);\n      }\n    },\n    render: {\n      value: function render() {\n        var id = this._reactInternalInstance._rootNodeID;\n        var classes = classSet(\"dropdown\", {\n          open: this.state.open\n        });\n        return React.createElement(\"div\", {\n          className: classes,\n          onMouseDown: this.handleMouseDown.bind(this),\n          onMouseUp: this.handleMouseUp.bind(this)\n        }, React.createElement(DropdownButton, {\n          id: id,\n          caretClass: this.props.caretClass,\n          disabled: this.props.disabled,\n          toggleOpen: this.toogleOpen.bind(this)\n        }, this.state.title), React.createElement(DropdownMenu, {\n          items: this.props.items,\n          onSelect: this.handleTitleAndSelect.bind(this),\n          id: id\n        }));\n      }\n    },\n    handleDocumentClick: {\n      // handle click outside of element\n\n      value: function handleDocumentClick(e) {\n        var wasDown = this.mouseDownOnModal;\n        var wasUp = this.mouseUpOnModal;\n        this.mouseDownOnModal = false;\n        this.mouseUpOnModal = false;\n        if (!wasDown && !wasUp && this.state.open) {\n          this.toogleOpen();\n        }\n      }\n    },\n    handleMouseDown: {\n      value: function handleMouseDown() {\n        this.mouseDownOnModal = true;\n      }\n    },\n    handleMouseUp: {\n      value: function handleMouseUp() {\n        this.mouseUpOnModal = true;\n      }\n    }\n  });\n  return DropDown;\n}(React.Component);\nDropDown.propTypes = {\n  title: React.PropTypes.string,\n  items: React.PropTypes.array,\n  disabled: React.PropTypes.bool,\n  updateTitle: React.PropTypes.bool,\n  caretClass: React.PropTypes.string\n};\nDropDown.defaultProps = {\n  title: \"Dropdown\",\n  disabled: false,\n  updateTitle: true,\n  caretClass: \"caret\"\n};\nmodule.exports = DropDown;","map":null,"metadata":{},"sourceType":"script"}